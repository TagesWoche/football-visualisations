// Generated by CoffeeScript 1.3.3
(function($) {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.tageswoche = this.tageswoche || {};

  tageswoche.field = (function() {
    return {
      scorePosition: {
        om: 40,
        um: 40,
        ol: 68,
        ul: 68,
        or: 12,
        ur: 12
      },
      originalWidth: 1152,
      widthHeightRelation: 1152 / 760,
      cellWidth: 64,
      heights: [67, 67, 67, 67, 73, 80, 73, 67, 67, 67, 67],
      scale: 1,
      playDirection: "left",
      calcPosition: function(position, mirror) {
        var height, index, x, y, _i, _len, _ref;
        if (mirror == null) {
          mirror = false;
        }
        position = this.parsePosition(position, mirror);
        x = (position.horizontal - 1) * this.cellWidth;
        y = 0;
        _ref = this.heights;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          height = _ref[index];
          if ((index + 1) < position.vertical) {
            y += height;
          }
        }
        x += this.cellWidth / 2;
        y += this.heights[position.vertical - 1] / 2;
        return {
          x: this.scale * x,
          y: this.scale * y
        };
      },
      calcPenaltyPosition: function() {
        var correction, pos;
        correction = this.scale * this.cellWidth / 2;
        if (this.playDirection === "left") {
          pos = this.calcPosition("C6");
          pos.x = pos.x - correction;
        } else {
          pos = this.calcPosition("C6", true);
          pos.x = pos.x + correction;
        }
        return pos;
      },
      goalPosition: function(scorePosition) {
        var height, index, position, x, y, _i, _len, _ref;
        position = {
          horizontal: 1,
          vertical: 6
        };
        x = this.playDirection === "left" ? 12 : this.originalWidth - 12;
        y = this.scorePosition[scorePosition];
        if (this.playDirection === "right") {
          y = 80 - y;
        }
        _ref = this.heights;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          height = _ref[index];
          if ((index + 1) < position.vertical) {
            y += height;
          }
        }
        return {
          x: this.scale * x,
          y: this.scale * y
        };
      },
      parsePosition: function(position, mirror) {
        var charCode, horizontalPosition, letter, positionParts, verticalPositon;
        if (mirror == null) {
          mirror = false;
        }
        position = position.replace(/\s/g, "");
        positionParts = /^([a-r])([1-9][01]?)$/i.exec(position);
        if (!positionParts && console) {
          console.log("invalid position: " + position);
        }
        letter = positionParts[1];
        charCode = letter.toLowerCase().charCodeAt(0);
        horizontalPosition = charCode - 96;
        verticalPositon = +positionParts[2];
        if (mirror) {
          return {
            horizontal: 19 - horizontalPosition,
            vertical: 12 - verticalPositon
          };
        } else {
          return {
            horizontal: horizontalPosition,
            vertical: verticalPositon
          };
        }
      }
    };
  })();

  this.tageswoche = this.tageswoche || {};

  tageswoche.curve = (function() {
    var percentRegex;
    percentRegex = /(\d+)%/;
    return {
      curve: function(start, end, curvedness, curvePosition, direction) {
        var controlPoint, path;
        if (curvedness == null) {
          curvedness = 0;
        }
        if (curvePosition == null) {
          curvePosition = 0.5;
        }
        controlPoint = this.bezierControlPoint(start, end, curvedness, curvePosition, direction);
        path = "M" + [start.x, start.y];
        return path += "C" + [controlPoint.x, controlPoint.y, end.x, end.y, end.x, end.y];
      },
      wavy: function(start, end, curvedness) {
        var controlPoint1, controlPoint2, path;
        controlPoint1 = this.bezierControlPoint(start, end, curvedness, 0.35, "right");
        controlPoint2 = this.bezierControlPoint(start, end, curvedness, 0.65, "left");
        path = "M" + [start.x, start.y];
        return path += "C" + [controlPoint1.x, controlPoint1.y, controlPoint2.x, controlPoint2.y, end.x, end.y];
      },
      arrow: function(base, tip, pointyness) {
        var path, pointA, pointB, size;
        if (pointyness == null) {
          pointyness = 0.5;
        }
        size = this.distance(base, tip) * pointyness;
        pointA = this.bezierControlPoint(base, tip, size, 0, "right");
        pointB = this.bezierControlPoint(base, tip, size, 0, "left");
        path = "M" + [pointB.x, pointB.y];
        path += "L" + [tip.x, tip.y];
        return path += "L" + [pointA.x, pointA.y];
      },
      line: function(start, end) {
        return "M" + [start.x, start.y] + "L" + [end.x, end.y];
      },
      distance: function(start, end) {
        var deltaX, deltaY;
        deltaX = end.x - start.x;
        deltaY = end.y - start.y;
        return Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));
      },
      intermediatePoint: function(start, end, fraction) {
        var deltaX, deltaY;
        deltaX = end.x - start.x;
        deltaY = end.y - start.y;
        return {
          x: start.x + (deltaX * fraction),
          y: start.y + (deltaY * fraction)
        };
      },
      bezierControlPoint: function(start, end, curvedness, curvePosition, direction) {
        var angularVector, intermediatePoint, normVector, percent;
        if (direction == null) {
          direction = "right";
        }
        if (percent = this.percent(curvedness)) {
          curvedness = this.distance(start, end) * percent;
        }
        intermediatePoint = this.intermediatePoint(start, end, curvePosition);
        normVector = this.normVector(start, end);
        angularVector = direction === "left" ? this.rotateVectorClockwise(normVector) : this.rotateVectorCounterClockwise(normVector);
        return this.add(intermediatePoint, this.multiply(angularVector, curvedness));
      },
      percent: function(percent) {
        var result;
        result = percentRegex.exec(percent);
        if (result) {
          return result[1] / 100;
        } else {
          return void 0;
        }
      },
      multiply: function(vector, multiplicator) {
        return {
          x: vector.x * multiplicator,
          y: vector.y * multiplicator
        };
      },
      add: function(vector1, vector2) {
        return {
          x: vector1.x + vector2.x,
          y: vector1.y + vector2.y
        };
      },
      normVector: function(start, end) {
        var deltaX, deltaY, distance, normX, normY;
        deltaX = end.x - start.x;
        deltaY = end.y - start.y;
        distance = Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));
        normX = deltaX / distance;
        normY = deltaY / distance;
        return {
          x: normX,
          y: normY
        };
      },
      rotateVectorClockwise: function(vector) {
        return {
          x: vector.y,
          y: -vector.x
        };
      },
      rotateVectorCounterClockwise: function(vector) {
        return {
          x: -vector.y,
          y: vector.x
        };
      },
      delta: function(start, end) {
        return {
          x: end.x - start.x,
          y: end.y - start.y
        };
      },
      slope: function(start, end) {
        var delta;
        delta = this.delta(start, end);
        return delta.y / delta.x;
      },
      inverseSlope: function(start, end) {
        return -1 / this.slope(start, end);
      }
    };
  })();

  this.tageswoche = this.tageswoche || {};

  tageswoche.data = (function() {
    var specialConditionsAttr;
    specialConditionsAttr = {
      "fd": "directFreeKick",
      "fi": "indirectFreeKick",
      "e": "corner",
      "p": "penalty",
      "ps": "penaltyShootout",
      "ew": "throwIn",
      "f": "foul"
    };
    return {
      scenes: void 0,
      games: {},
      current: -1,
      addSceneToGame: function(scene) {
        var game, _base, _name, _ref;
        game = (_ref = (_base = this.games)[_name = scene.date]) != null ? _ref : _base[_name] = [];
        this.scenes.push(scene);
        return game.push(this.scenes.length - 1);
      },
      firstScene: function() {
        var game, lastScene;
        lastScene = this.scenes[this.scenes.length - 1];
        game = this.games[lastScene.date];
        this.current = game[0];
        return this.scenes[this.current];
      },
      nextScene: function() {
        if (!this.isLastScene()) {
          this.current += 1;
        }
        return this.scenes[this.current];
      },
      isLastScene: function() {
        return this.current === (this.scenes.length - 1);
      },
      previousScene: function() {
        if (!this.isFirstScene()) {
          this.current -= 1;
        }
        return this.scenes[this.current];
      },
      isFirstScene: function() {
        return this.current === 0;
      },
      getScene: function(index) {
        if (0 <= index && index < this.scenes.length) {
          return this.scenes[index];
        }
      },
      gotoScene: function(index) {
        var scene;
        if (scene = this.getScene(index)) {
          this.current = index;
          return scene;
        }
      },
      nextGameScene: function() {
        var game, lastScene, nextScene;
        game = this.games[this.scenes[this.current].date];
        lastScene = game[game.length - 1];
        if (nextScene = this.getScene(lastScene + 1)) {
          return {
            scene: nextScene,
            index: lastScene + 1
          };
        }
      },
      previousGameScene: function() {
        var firstScene, game, lastScenePrevGame, prevGame;
        game = this.games[this.scenes[this.current].date];
        firstScene = game[0];
        if (lastScenePrevGame = this.getScene(firstScene - 1)) {
          prevGame = this.games[lastScenePrevGame.date];
          return {
            scene: this.scenes[prevGame[0]],
            index: prevGame[0]
          };
        }
      },
      loadScenes: function(callback) {
        var _this = this;
        if (this.scenes) {
          callback(void 0, this.scenes);
          return;
        }
        $.ajax({
          url: "http://tageswoche.herokuapp.com/fcb/situations",
          dataType: "jsonp"
        }).done(function(data) {
          var action, entry, scene, scorePositionParts, _i, _j, _len, _len1, _ref;
          data = data.list;
          _this.scenes = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            entry = data[_i];
            if (!/g:/i.test(entry.scorePosition)) {
              _ref = entry.playerPositions;
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                action = _ref[_j];
                if (action.specialCondition) {
                  action[specialConditionsAttr[action.specialCondition.toLowerCase()]] = true;
                }
              }
              scene = {
                actions: entry.playerPositions,
                score: entry.score,
                minute: entry.minute,
                opponent: entry.opponent,
                team: entry.team,
                home: entry.homematch,
                date: entry.date,
                competition: entry.competition,
                scorePosition: entry.scorePosition
              };
              if (entry.scorePosition) {
                scorePositionParts = /(g:)?([ou])([mlr])/i.exec(entry.scorePosition);
                if (scorePositionParts) {
                  if (scorePositionParts[2].toLowerCase() === "o") {
                    scene.highKick = true;
                  } else {
                    scene.lowKick = true;
                  }
                }
              }
              _this.addSceneToGame(scene);
            }
          }
          return callback(void 0, _this.scenes);
        });
      },
      loadScenesFake: function(callback) {
        var data, entry, newData;
        data = [
          {
            score: "1:0",
            minute: 85,
            date: "01.06.2012",
            opponent: "GC",
            team: "FCB",
            home: true,
            tournament: "l",
            scorePosition: "OM",
            actions: [
              {
                name: "Stocker",
                number: 5,
                positions: ["H1"]
              }, {
                name: "Park",
                number: 8,
                positions: ["E1", "C10"]
              }, {
                name: "Streller",
                number: 10,
                positions: ["E9", "A8"]
              }, {
                name: "D. Degen",
                number: 7,
                positions: ["C7"]
              }
            ]
          }, {
            score: "2:0",
            minute: 86,
            date: "01.06.2012",
            opponent: "GC",
            team: "FCB",
            home: true,
            tournament: "l",
            scorePosition: "UL",
            actions: [
              {
                name: "Frei",
                number: 11,
                positions: ["H4", "F4"]
              }, {
                name: "Park",
                number: 8,
                positions: ["E6"]
              }, {
                name: "Frei",
                number: 11,
                positions: ["C5"]
              }
            ]
          }, {
            score: "1:0",
            minute: 14,
            date: "01.07.2012",
            opponent: "Servette",
            team: "FCB",
            home: true,
            tournament: "l",
            scorePosition: "UL",
            actions: [
              {
                name: "Frei",
                number: 11,
                positions: ["H6"]
              }, {
                name: "Park",
                number: 8,
                positions: ["E5", "E4"]
              }, {
                name: "Frei",
                number: 11,
                positions: ["C3"]
              }
            ]
          }
        ];
        this.scenes = data;
        this.games = {};
        newData = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            entry = data[_i];
            _results.push(this.addSceneToGame(entry));
          }
          return _results;
        }).call(this);
        return callback(void 0, data);
      }
    };
  })();

  /* RAPHAEL CLASS
  */


  this.RaphaelMap = (function() {

    function RaphaelMap(container, width, height) {
      this.container = container;
      this.width = width;
      this.height = height;
      this.map = Raphael(this.container, this.width, this.height);
    }

    RaphaelMap.prototype.scale = function(svgs, ratio) {
      var svg, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = svgs.length; _i < _len; _i++) {
        svg = svgs[_i];
        _results.push(svg.scale(ratio, ratio, 0, 0));
      }
      return _results;
    };

    return RaphaelMap;

  })();

  /* SOCCERMAP CLASS
  */


  this.SoccerMap = (function(_super) {
    var curve, data, field;

    __extends(SoccerMap, _super);

    curve = tageswoche.curve;

    field = tageswoche.field;

    data = tageswoche.data;

    function SoccerMap(container, settings) {
      var height, self, width,
        _this = this;
      this.container = container;
      this.settings = settings != null ? settings : {};
      self = this;
      width = $("#scenes").width();
      field.scale = width / field.originalWidth;
      height = width / field.widthHeightRelation;
      SoccerMap.__super__.constructor.call(this, this.container, width, height);
      this.scene = void 0;
      this.actions = [];
      this.black = "#555555";
      this.red = "#EE402F";
      this.blue = "#0051A3";
      this.white = "#FFFFFF";
      this.darkGrey = "#333333";
      this.fcbAttributes = {
        fill: this.red,
        stroke: "",
        "stroke-width": 1.0,
        "stroke-linejoin": "round"
      };
      this.opponentAttributes = {
        fill: this.black,
        stroke: "",
        "stroke-width": 1.0,
        "stroke-linejoin": "round"
      };
      this.numberTextAttributes = {
        fill: "#FFFFFF",
        stroke: "none",
        font: '200 13px "Helvetica Neue", Helvetica, "Arial Unicode MS", Arial, sans-serif'
      };
      this.circleRadius = 11;
      this.playerColor = this.red;
      this.playerAttributes = this.fcbAttributes;
      this.shadowOpacity = 0.5;
      this.initEvents();
      this.firstScene();
      $(window).resize(function(event) {
        return _this.redrawField();
      });
    }

    SoccerMap.prototype.redrawField = function() {
      var height, width;
      width = $("#scenes").width();
      field.scale = width / field.originalWidth;
      height = width / field.widthHeightRelation;
      this.map.setSize(width, height);
      return this.draw();
    };

    SoccerMap.prototype.firstScene = function() {
      var _this = this;
      return data.loadScenes(function(error, scenes) {
        _this.scene = data.firstScene();
        return _this.draw();
      });
    };

    SoccerMap.prototype.nextScene = function() {
      this.scene = data.nextScene();
      return this.draw();
    };

    SoccerMap.prototype.previousScene = function() {
      this.scene = data.previousScene();
      return this.draw();
    };

    SoccerMap.prototype.nextGame = function() {
      var next;
      if (next = data.nextGameScene()) {
        this.scene = data.gotoScene(next.index);
        return this.draw();
      }
    };

    SoccerMap.prototype.previousGame = function() {
      var prev;
      if (prev = data.previousGameScene()) {
        this.scene = data.gotoScene(prev.index);
        return this.draw();
      }
    };

    SoccerMap.prototype.initEvents = function() {
      var _this = this;
      $("#next-scene").click(function(event) {
        event.preventDefault();
        return _this.nextScene();
      });
      $("#prev-scene").click(function(event) {
        event.preventDefault();
        return _this.previousScene();
      });
      $("#prev-game").click(function(event) {
        event.preventDefault();
        return _this.previousGame();
      });
      $("#next-game").click(function(event) {
        event.preventDefault();
        return _this.nextGame();
      });
      return $("#scene-list").on("click", "a", function(event) {
        var $this, scene, sceneIndex;
        event.preventDefault();
        $this = $(event.target);
        sceneIndex = $this.parent().data("sceneIndex");
        scene = data.scenes[sceneIndex];
        _this.scene = data.gotoScene(sceneIndex);
        return _this.draw();
      });
    };

    SoccerMap.prototype.fcbScene = function() {
      return this.scene.team.toLowerCase() === "fcb";
    };

    SoccerMap.prototype.draw = function() {
      var action, first, last, _i, _len, _ref;
      if (this.fcbScene()) {
        field.playDirection = "left";
        this.playerColor = this.red;
        this.playerAttributes = this.fcbAttributes;
      } else {
        field.playDirection = "right";
        this.playerColor = this.black;
        this.playerAttributes = this.opponentAttributes;
      }
      this.actions = this.scene.actions;
      _ref = this.actions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        first = action.positions[0];
        last = action.positions[action.positions.length - 1];
        if (action.positions.length > 1) {
          action.running = true;
        }
        action.start = field.calcPosition(first);
        action.end = action.running ? field.calcPosition(last) : action.start;
        if (action.penalty) {
          action.end = field.calcPenaltyPosition();
        }
      }
      this.map.clear();
      this.drawPasses();
      this.drawPositions();
      this.updateInfo();
      this.sceneInfo();
      return this.setupPopups();
    };

    SoccerMap.prototype.updateInfo = function() {
      var $gameLink, game, scene, sceneIndex, ul, _i, _len, _results;
      $("#scene-result .score").html(this.scene.score);
      $("#scene-result .left span").html("FCB");
      if (this.scene.opponent) {
        $("#scene-result .right span").html(this.scene.opponent.toUpperCase());
      }
      $("#prev-scene, #next-scene, #prev-game, #next-game").css("visibility", "visible");
      if (data.isLastScene()) {
        $("#next-scene").css("visibility", "hidden");
      }
      if (data.isFirstScene()) {
        $("#prev-scene").css("visibility", "hidden");
      }
      if (!data.nextGameScene()) {
        $("#next-game").css("visibility", "hidden");
      }
      if (!data.previousGameScene()) {
        $("#prev-game").css("visibility", "hidden");
      }
      game = data.games[this.scene.date];
      ul = $("#scene-list").html("");
      _results = [];
      for (_i = 0, _len = game.length; _i < _len; _i++) {
        sceneIndex = game[_i];
        scene = data.scenes[sceneIndex];
        $gameLink = $("<li><a href='' class='" + (scene === this.scene ? "active" : void 0) + "'>" + scene.minute + ".</a></li>");
        $gameLink.data("sceneIndex", sceneIndex);
        _results.push(ul.append($gameLink));
      }
      return _results;
    };

    SoccerMap.prototype.extractSceneInfo = function() {
      var assistAction, goalAction, length;
      length = this.actions.length;
      if (length) {
        goalAction = this.actions[length - 1];
        if (!goalAction.foul) {
          this.scene.goal = goalAction.name;
          if (goalAction.penalty) {
            this.scene.goal = "" + this.scene.goal + " (Penalty)";
          } else if (goalAction.directFreeKick) {
            this.scene.goal = "" + this.scene.goal + " (Freistoss direkt)";
          } else if (goalAction.indirectFreeKick) {
            this.scene.goal = "" + this.scene.goal + " (Freistoss indirekt)";
          }
          if (length > 1) {
            assistAction = this.actions[length - 2];
            if (!assistAction.foul && !this.otherTeamAction(assistAction)) {
              this.scene.assist = assistAction.name;
              if (assistAction.directFreeKick) {
                return this.scene.assist = "" + this.scene.assist + " (Freistoss direkt)";
              } else if (assistAction.indirectFreeKick) {
                return this.scene.assist = "" + this.scene.assist + " (Freistoss indirekt)";
              }
            }
          }
        }
      }
    };

    SoccerMap.prototype.otherTeamAction = function(action) {
      if (this.fcbScene()) {
        return !action.number;
      } else {
        return !!action.number;
      }
    };

    SoccerMap.prototype.sceneInfo = function() {
      var desc;
      this.extractSceneInfo();
      desc = $("#scene-desc").html("").append("<em>" + this.scene.team + " &ndash; " + this.scene.minute + ". Minute:</em>").append("<span>Tor: <strong>" + this.scene.goal + "</strong></span>");
      if (this.scene.assist) {
        return desc.append("<span>Assist: <strong>" + this.scene.assist + "</strong></span>");
      }
    };

    SoccerMap.prototype.setupPopups = function() {
      var _this = this;
      $(".player-number").hover(function(event) {
        var $elem;
        $elem = $(event.currentTarget);
        return $($elem.prev()).tooltip("show");
      }, function(event) {
        var $elem;
        $elem = $(event.currentTarget);
        return $($elem.prev()).tooltip("hide");
      });
      return $(".player, .player-number").tooltip();
    };

    SoccerMap.prototype.showPopup = function(playerStats, $elem) {
      if ($elem.attr("class") === "player") {
        $($elem.next()).tooltip({
          title: playerStats.name
        });
        return $($elem.next()).tooltip("show");
      } else if ($elem.attr("class") === "player-number") {
        return $elem.tooltip({
          title: playerStats.name
        });
      }
    };

    SoccerMap.prototype.drawPasses = function() {
      var action, lastPosition, _i, _len, _ref;
      lastPosition = void 0;
      _ref = this.actions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        if (action.running) {
          this.drawSprint(action.start, action.end);
        }
        if (lastPosition) {
          this.addPass(lastPosition, action.start);
        }
        if (action.foul) {
          lastPosition = void 0;
        } else {
          lastPosition = action.end;
        }
      }
      if (lastPosition) {
        return this.drawGoal(lastPosition);
      }
    };

    SoccerMap.prototype.drawPositions = function() {
      var $circle, action, circle, currentAttributes, player, start, _i, _len, _ref, _results;
      _ref = this.actions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        currentAttributes = action.number ? this.fcbAttributes : this.playerAttributes;
        start = action.start;
        player = action.end;
        if (action.running) {
          this.map.circle(start.x, start.y, this.circleRadius * 0.5).attr(currentAttributes);
        }
        if (action.penalty || action.directFreeKick || action.indirectFreeKick) {
          currentAttributes = $.extend({}, currentAttributes, {
            stroke: this.white
          });
        }
        circle = this.map.circle(player.x, player.y, this.circleRadius).attr(currentAttributes);
        $circle = jQuery(circle.node);
        $circle.attr("data-playername", action.fullname);
        $circle.attr("rel", "tooltip");
        $circle.attr("class", "player");
        $circle.attr("title", action.fullname);
        if (action.number) {
          _results.push(this.label(player, action.number, action.fullname));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    SoccerMap.prototype.drawSprint = function(start, end) {
      var path;
      path = curve.wavy(start, end, "10%");
      return this.map.path(path).attr({
        fill: "",
        stroke: this.playerColor,
        "stroke-width": 2
      });
    };

    SoccerMap.prototype.addPass = function(start, end) {
      var endGap, length, path, startGap, subCurve;
      path = curve.curve(start, end, "10%", 0.6, "right");
      startGap = 0;
      endGap = 16;
      length = Raphael.getTotalLength(path);
      subCurve = Raphael.getSubpath(path, startGap, length - endGap);
      this.drawArrow(path, {
        length: length - endGap
      });
      return this.map.path(subCurve).attr({
        fill: "",
        stroke: this.white,
        "stroke-width": 2
      });
    };

    SoccerMap.prototype.drawGoal = function(start) {
      var end, endShadowX, endShadowY, foot, path, xCorrection, yCorrection;
      end = field.goalPosition(this.scene.scorePosition.toLowerCase());
      foot = start.y < end.y ? "left" : "right";
      if (field.playDirection === "right") {
        foot = foot === "left" ? "right" : "left";
      }
      xCorrection = field.playDirection === "right" ? -5 : 5;
      yCorrection = this.scene.highKick ? 14 : 3;
      endShadowX = end.x + (xCorrection * field.scale);
      endShadowY = end.y + (yCorrection * field.scale);
      path = curve.curve(start, {
        x: endShadowX,
        y: endShadowY
      }, "8%", 0.6, foot);
      this.drawArrow(path, {
        size: 10,
        pointyness: 0.3,
        strokeWidth: 3,
        color: this.darkGrey,
        opacity: this.shadowOpacity
      });
      this.map.path(path).attr({
        fill: "",
        stroke: this.darkGrey,
        "stroke-width": 3,
        opacity: this.shadowOpacity
      });
      path = curve.curve(start, end, "8%", 0.6, foot);
      this.drawArrow(path, {
        size: 10,
        pointyness: 0.3,
        strokeWidth: 3
      });
      return this.map.path(path).attr({
        fill: "",
        stroke: this.white,
        "stroke-width": 3
      });
    };

    SoccerMap.prototype.drawArrow = function(path, _arg) {
      var arrowhead, base, color, length, opacity, pointyness, size, strokeWidth, tip;
      length = _arg.length, size = _arg.size, pointyness = _arg.pointyness, strokeWidth = _arg.strokeWidth, color = _arg.color, opacity = _arg.opacity;
      if (length == null) {
        length = Raphael.getTotalLength(path);
      }
      if (size == null) {
        size = 10;
      }
      if (pointyness == null) {
        pointyness = 0.3;
      }
      if (strokeWidth == null) {
        strokeWidth = 2;
      }
      if (color == null) {
        color = this.white;
      }
      if (opacity == null) {
        opacity = 1;
      }
      if ((length - size) > 5) {
        base = Raphael.getPointAtLength(path, length - size);
        tip = Raphael.getPointAtLength(path, length);
        arrowhead = curve.arrow(base, tip, pointyness);
        return this.map.path(arrowhead).attr({
          fill: "",
          stroke: color,
          "stroke-width": strokeWidth,
          opacity: opacity
        });
      }
    };

    SoccerMap.prototype.label = function(position, label, name) {
      var $text, text, x;
      x = position.x;
      if (+label > 9 && +label < 20) {
        x -= 1;
      }
      text = this.map.text(x, position.y, label).attr(this.numberTextAttributes);
      $text = jQuery(text.node);
      return $text.attr("rel", "tooltip").attr("class", "player-number").attr("data-playername", name);
    };

    return SoccerMap;

  })(RaphaelMap);

  this.tageswoche = this.tageswoche || {};

  this.tageswoche.templates = (function() {
    return {
      table: _.template("<table id=\"player-table\">\n  <colgroup>\n    <col class=\"col-player\">\n    <col class=\"col-position\">\n    <col class=\"col-games\">\n    <col class=\"col-minutes\">\n    <col class=\"col-grade\">\n    <col class=\"col-goals\">\n    <col class=\"col-assists\">\n    <col class=\"col-yellow\" align=\"center\">\n    <col class=\"col-yellow-red\" align=\"center\">\n    <col class=\"col-red\" align=\"center\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Spieler</th>\n      <th class=\"headerSortDown\">Position*</th>\n      <th>Einsätze</th>\n      <th>Minuten</th>\n      <th>&oslash; Bewertung</th>\n      <th>Tore</th>\n      <th>Assists</th>\n      <th class=\"hide-mobile\">Gelbe</th>\n      <th class=\"hide-mobile\">Gelb-Rote</th>\n      <th class=\"hide-mobile\">Rote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <% _.each(players, function(player) { %>\n      <tr>\n        <td><%= player.name %></td>\n        <td class=\"center td-position\"><%= player.position %></td>\n        <td class=\"center games-table\"><%= player.played %></td>\n        <td class=\"center games-table\"><%= tageswoche.tableData.aboveNull( player.minutes ) %></td>\n        <td class=\"center games-table\"><%= tageswoche.tableData.aboveNullRounded( player.averageGrade ) %></td>\n        <td class=\"center scenes-table\"><%= tageswoche.tableData.aboveNull( player.goals ) %></td>\n        <td class=\"center scenes-table\"><%= tageswoche.tableData.aboveNull( player.assists ) %></td>\n        <td class=\"hide-mobile center\"><%= tageswoche.tableData.aboveNull( player.yellowCards ) %></td>\n        <td class=\"hide-mobile center\"><%= tageswoche.tableData.aboveNull( player.yellowRedCards ) %></td>\n        <td class=\"hide-mobile center\"><%= tageswoche.tableData.aboveNull( player.redCards ) %></td>\n      </tr>\n    <% }); %>\n  </tbody>\n  <tbody style=\"font-weight:bold;text-align:center\">\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td class=\"hide-mobile\"></td>\n      <td class=\"hide-mobile\"></td>\n      <td class=\"hide-mobile\"></td>\n    </tr>\n    <tr>\n      <% sum = tageswoche.tableData.totals( players ) %>\n      <td>Total</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td><%= sum.averageGrade %></td>\n      <td><%= sum.goals %></td>\n      <td><%= sum.assists %></td>\n      <td class=\"hide-mobile\"><%= sum.yellowCards %></td>\n      <td class=\"hide-mobile\"><%= sum.yellowRedCards %></td>\n      <td class=\"hide-mobile\"><%= sum.redCards %></td>\n    </tr>\n  </tbody>\n</table>\n<br/>\n<small class=\"legend\">* TW: Tor, VE: Verteidigung, MF: Mittelfeld, ST: Sturm</small>"),
      tableGames: _.template("<table id=\"player-table\">\n  <colgroup>\n    <col class=\"col-player\">\n    <col class=\"col-position\">\n    <col class=\"col-games\">\n    <col class=\"col-minutes\">\n    <col class=\"col-grade\">\n    <col class=\"col-graph\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Spieler</th>\n      <th class=\"headerSortDown\">Position*</th>\n      <th>Einsätze</th>\n      <th>Minuten</th>\n      <th>&oslash; Bewertung</th>\n      <th class=\"graph-column\">Bewertung letzte Spiele</th>\n    </tr>\n  </thead>\n  <tbody>\n    <% _.each(players, function(player) { %>\n      <tr>\n        <td><%= player.name %></td>\n        <td class=\"center td-position\"><%= player.position %></td>\n        <td class=\"center top-table\"><%= player.played %></td>\n        <td class=\"center top-table\"><%= tageswoche.tableData.aboveNull( player.minutes ) %></td>\n        <td class=\"center top-table\"><%= tageswoche.tableData.aboveNullRounded( player.averageGrade ) %></td>\n        <td class=\"gradesList bar graph graph-column\"> \n        </td>\n      </tr>\n    <% }); %>\n  </tbody>\n  <tbody style=\"font-weight:bold;text-align:center\">\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td class=\"graph-column\"></td>\n    </tr>\n    <tr>\n      <td>Total</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td><%= sum.averageGrade %></td>\n      <td class=\"bar graph graph-column\" id=\"totalGrades\" style=\"text-align: left\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n<br/>\n<small class=\"legend\">* TW: Tor, VE: Verteidigung, MF: Mittelfeld, ST: Sturm</small>"),
      tableScenes: _.template("<table id=\"player-table\">\n  <colgroup>\n    <col class=\"col-player\">\n    <col class=\"col-games\">\n    <col class=\"col-goals\">\n    <col class=\"col-assists\">\n    <col class=\"col-scores\">\n    <col class=\"col-scoresperminute\">\n    <col class=\"col-graph\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Spieler</th>\n      <th>Einsätze</th>\n      <th>Tore</th>\n      <th>Assists</th>\n      <th>Scorerpunkte*</th>\n      <th>Minuten pro Scorerpunkt</th>\n      <th class=\"graph-column\">Letzte Spiele</th>\n    </tr>\n  </thead>\n  <tbody>\n    <% _.each(players, function(player) { %>\n      <tr>\n        <td><%= player.name %></td>\n        <td class=\"center games-table\"><%= player.played %></td>\n        <td class=\"center top-table\"><%= tageswoche.tableData.aboveNull( player.goals ) %></td>\n        <td class=\"center top-table\"><%= tageswoche.tableData.aboveNullRounded( player.assists ) %></td>\n        <td class=\"center top-table\"><%= tageswoche.tableData.aboveNullRounded( player.goals + player.assists ) %></td>  \n        <td class=\"center top-table\"><%= tageswoche.tableData.aboveNullRounded( player.minutes / (player.goals + player.assists) ) %></td>\n        <td class=\"scoresList bar graph graph-column\"></td>\n      </tr>\n    <% }); %>\n  </tbody>\n  <tbody style=\"font-weight:bold;text-align:center\">\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td class=\"graph-column\"></td>\n    </tr>\n    <tr>\n      <% sum = tageswoche.tableData.totals( players ) %>\n      <td>Total</td>\n      <td></td>\n      <td><%= sum.goals %></td>\n      <td><%= sum.assists %></td>\n      <td><%= sum.goals + sum.assists %></td>\n      <td><%= tageswoche.tableData.aboveNullRounded(sum.minutes / (sum.goals + sum.assists)) %></td>\n      <td class=\"bar graph graph-column\" id=\"totalScores\" style=\"text-align: left\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n<br>\n<small class=\"legend\">* Tore und Assists zusammengezählt</small>")
    };
  })();

  this.tageswoche = this.tageswoche || {};

  tageswoche.tableData = (function() {
    var templates;
    templates = tageswoche.templates;
    return {
      statistics: {},
      filter: {},
      data: {},
      limit: 14,
      current: "top",
      init: function() {
        var _this = this;
        this.prepareTablesorter();
        this.initEvents();
        this.loadStatistics(this.filter, $.proxy(this.redrawTable, this));
        return $("#location-filter").on("change", function(event) {
          var $this;
          $this = $(event.currentTarget);
          _this.filter = {
            location: $this.val()
          };
          return _this.loadStatistics(_this.filter, $.proxy(_this.redrawTable, _this));
        });
      },
      redrawTable: function(data) {
        this.data = data;
        return this.drawTable(this.current);
      },
      getStatisticsForPopup: function() {
        return this.statistics["all"];
      },
      loadStatistics: function(filter, callback) {
        var filterString,
          _this = this;
        filterString = "";
        if (filter.location) {
          filterString += "location=" + filter.location + "&";
        }
        if (filter.game) {
          filterString += "game=" + filter.game;
        }
        if (filterString === "") {
          filterString = "all";
        }
        if (this.statistics[filterString]) {
          callback(this.statistics[filterString]);
        } else {
          $.ajax({
            url: "http://tageswoche.herokuapp.com/fcb/statistics?" + filterString,
            dataType: "jsonp"
          }).done(function(data) {
            _this.statistics[filterString] = data;
            return callback(data);
          });
        }
      },
      drawTable: function(tableName) {
        this.current = tableName;
        $("#table-nav li a.active").removeClass("active");
        $("#table-nav li a." + tableName + "-table").addClass("active");
        switch (tableName) {
          case "top":
            return this.showTopTable();
          case "games":
            return this.showGamesTable();
          case "scenes":
            return this.showScenesTable();
        }
      },
      showTopTable: function() {
        $("#stats").html(templates.table({
          players: this.data.list
        }));
        return this.tablesorter();
      },
      showScenesTable: function() {
        var _this = this;
        $("#stats").html(templates.tableScenes({
          players: this.data.list
        }));
        _.each($(".scoresList"), function(playerEntry, idx) {
          var $playerEntry, gameNames, playerScores;
          $playerEntry = $(playerEntry);
          playerScores = _.chain(_this.data.list[idx].scores).map(function(scoreEntry) {
            return scoreEntry.scores.reverse();
          }).last(_this.limit).value();
          gameNames = _.chain(_this.data.list[0].scores).map(function(gradeEntry) {
            return gradeEntry.opponent;
          }).last(_this.limit).value();
          return $playerEntry.sparkline(playerScores, {
            type: 'bar',
            tooltipFormatter: function(sparklines, options, fields) {
              return "Gegner " + gameNames[fields[0].offset] + ". <br/> Tore: " + fields[0].value + ", Assists: " + fields[1].value;
            },
            height: 15,
            barWidth: 12,
            barSpacing: 2
          });
        });
        return this.tablesorter();
      },
      showGamesTable: function() {
        var gameNames, totalValues,
          _this = this;
        $("#stats").html(templates.tableGames({
          players: this.data.list
        }));
        totalValues = _.chain(this.data.list[0].grades).map(function(gradeEntry) {
          return tageswoche.tableData.round(gradeEntry.gameAverageGrade);
        }).last(this.limit).value();
        gameNames = _.chain(this.data.list[0].grades).map(function(gradeEntry) {
          return gradeEntry.opponent;
        }).last(this.limit).value();
        $("#totalGrades").sparkline(totalValues, {
          type: 'bar',
          tooltipFormatter: function(sparklines, options, fields) {
            return "Gegner " + gameNames[fields[0].offset] + ": " + totalValues[fields[0].offset];
          },
          height: 15,
          barWidth: 12,
          barSpacing: 2,
          colorMap: {
            "": '#F6F6F6',
            "0": '#F6F6F6',
            "0.01:1": '#E92431',
            "1.01:2": '#EB4828',
            "2.01:3": '#F9892E',
            "3.01:4": '#EAE600',
            "4.01:5": '#7FC249',
            "5.01:6": '#1BA755'
          }
        });
        _.each($(".gradesList"), function(playerEntry, idx) {
          var $playerEntry, playerValues;
          $playerEntry = $(playerEntry);
          playerValues = _.chain(_this.data.list[idx].grades).map(function(gradeEntry) {
            return tageswoche.tableData.round(gradeEntry.grade);
          }).last(_this.limit).value();
          return $playerEntry.sparkline(playerValues, {
            type: 'bar',
            tooltipFormatter: function(sparklines, options, fields) {
              if (fields[0].value === 0) {
                return "Gegner " + gameNames[fields[0].offset] + ". keine Bewertung";
              } else {
                return "Gegner " + gameNames[fields[0].offset] + ". Note: " + fields[0].value + " <br/>Mannschafts-Durchschnitt: " + totalValues[fields[0].offset];
              }
            },
            height: 15,
            barWidth: 12,
            barSpacing: 2,
            colorMap: {
              "": '#F6F6F6',
              "0": '#F6F6F6',
              "0.01:1": '#E92431',
              "1.01:2": '#EB4828',
              "2.01:3": '#F9892E',
              "3.01:4": '#EAE600',
              "4.01:5": '#7FC249',
              "5.01:6": '#1BA755'
            }
          });
        });
        return this.tablesorter();
      },
      prepareTablesorter: function() {
        $.tablesorter.addParser({
          id: 'position',
          is: function(s) {
            return false;
          },
          format: function(value) {
            return value = value.toLowerCase().replace(/tw/i, 4).replace(/ve/i, 3).replace(/mf/i, 2).replace(/st/i, 1);
          },
          type: 'numeric'
        });
        return $.tablesorter.addParser({
          id: 'reverse',
          is: function(s) {
            return false;
          },
          format: function(value) {
            if (value) {
              return -value;
            } else {
              return -10000000;
            }
          },
          type: 'numeric'
        });
      },
      tablesorter: function() {
        var headers;
        headers = (function() {
          switch (this.current) {
            case "top":
              return {
                1: {
                  sorter: "position"
                }
              };
            case "games":
              return {
                1: {
                  sorter: "position"
                }
              };
            case "scenes":
              return {
                5: {
                  sorter: "reverse"
                }
              };
          }
        }).call(this);
        return $("#player-table").tablesorter({
          sortInitialOrder: "desc",
          rememberSorting: true,
          headers: headers
        });
      },
      initEvents: function() {
        var _this = this;
        $("#stats").on("click", "td", function(event) {
          var $this;
          $this = $(event.currentTarget);
          if ($this.hasClass("top-table")) {
            return _this.drawTable("top");
          } else if ($this.hasClass("games-table")) {
            return _this.drawTable("games");
          } else if ($this.hasClass("scenes-table")) {
            return _this.drawTable("scenes");
          }
        });
        $("#stats").on("click", "th", function(event) {
          var $this;
          $this = $(event.currentTarget);
          $("#stats th").removeClass("active");
          return $this.addClass("active");
        });
        return $("#table-nav li a").on("click", function(event) {
          var $this;
          event.preventDefault();
          $this = $(event.currentTarget);
          if ($this.hasClass("top-table")) {
            return _this.drawTable("top");
          } else if ($this.hasClass("games-table")) {
            return _this.drawTable("games");
          } else if ($this.hasClass("scenes-table")) {
            return _this.drawTable("scenes");
          }
        });
      },
      totals: function(players) {
        var gameGrade, gameGrades, gradeSum, index, player, sum, _i, _len, _ref;
        sum = {
          played: 0,
          minutes: 0,
          grades: [],
          goals: 0,
          assists: 0,
          yellowCards: 0,
          yellowRedCards: 0,
          redCards: 0,
          gameAverageGrades: []
        };
        gameGrades = [];
        for (_i = 0, _len = players.length; _i < _len; _i++) {
          player = players[_i];
          sum.played += +player.played;
          sum.minutes += +player.minutes;
          if (player.averageGrade > 0) {
            sum.grades.push(player.averageGrade);
          }
          sum.goals += +player.goals;
          sum.assists += +player.assists;
          sum.yellowCards += +player.yellowCards;
          sum.yellowRedCards += +player.yellowRedCards;
          sum.redCards += +player.redCards;
          _ref = player.grades;
          for (index in _ref) {
            gameGrade = _ref[index];
            if (gameGrades[index] === void 0) {
              gameGrades[index] = [];
            }
            gameGrades[index].push(gameGrade);
          }
        }
        gradeSum = _.reduce(sum.grades, function(sum, grade) {
          return sum += grade;
        }, 0);
        sum.averageGrade = tageswoche.tableData.round(gradeSum / sum.grades.length);
        return sum;
      },
      aboveNull: function(value) {
        var number;
        number = +value;
        if (number && number > 0 && _.isFinite(number)) {
          return number;
        } else {
          return "";
        }
      },
      round: function(value) {
        return Math.round(value * 10) / 10;
      },
      aboveNullRounded: function(value) {
        return this.aboveNull(this.round(value));
      }
    };
  })();

}).call(this, jQuery);
