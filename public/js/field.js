// Generated by CoffeeScript 1.3.3
(function() {

  this.tageswoche = this.tageswoche || {};

  tageswoche.field = (function() {
    return {
      scorePosition: {
        om: 40,
        um: 40,
        ol: 68,
        ul: 68,
        or: 12,
        ur: 12
      },
      originalWidth: 1152,
      widthHeightRelation: 1152 / 760,
      cellWidth: 64,
      heights: [67, 67, 67, 67, 73, 80, 73, 67, 67, 67, 67],
      scale: 1,
      playDirection: "left",
      calcPosition: function(position, mirror) {
        var height, index, x, y, _i, _len, _ref;
        if (mirror == null) {
          mirror = false;
        }
        position = this.parsePosition(position, mirror);
        x = (position.horizontal - 1) * this.cellWidth;
        y = 0;
        _ref = this.heights;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          height = _ref[index];
          if ((index + 1) < position.vertical) {
            y += height;
          }
        }
        x += this.cellWidth / 2;
        y += this.heights[position.vertical - 1] / 2;
        return {
          x: this.scale * x,
          y: this.scale * y
        };
      },
      calcPenaltyPosition: function() {
        var correction, pos;
        correction = this.scale * this.cellWidth / 2;
        if (this.playDirection === "left") {
          pos = this.calcPosition("C6");
          pos.x = pos.x - correction;
        } else {
          pos = this.calcPosition("C6", true);
          pos.x = pos.x + correction;
        }
        return pos;
      },
      goalPosition: function(scorePosition) {
        var height, index, position, x, y, _i, _len, _ref;
        position = {
          horizontal: 1,
          vertical: 6
        };
        x = this.playDirection === "left" ? 12 : this.originalWidth - 12;
        y = this.scorePosition[scorePosition];
        if (this.playDirection === "right") {
          y = 80 - y;
        }
        _ref = this.heights;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          height = _ref[index];
          if ((index + 1) < position.vertical) {
            y += height;
          }
        }
        return {
          x: this.scale * x,
          y: this.scale * y
        };
      },
      parsePosition: function(position, mirror) {
        var charCode, horizontalPosition, letter, positionParts, verticalPositon;
        if (mirror == null) {
          mirror = false;
        }
        position = position.replace(/\s/g, "");
        positionParts = /^([a-r])([1-9][01]?)$/i.exec(position);
        if (!positionParts && console) {
          console.log("invalid position: " + position);
        }
        letter = positionParts[1];
        charCode = letter.toLowerCase().charCodeAt(0);
        horizontalPosition = charCode - 96;
        verticalPositon = +positionParts[2];
        if (mirror) {
          return {
            horizontal: 19 - horizontalPosition,
            vertical: 12 - verticalPositon
          };
        } else {
          return {
            horizontal: horizontalPosition,
            vertical: verticalPositon
          };
        }
      }
    };
  })();

}).call(this);
