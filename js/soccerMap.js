// Generated by CoffeeScript 1.3.3

/* NATIONALRAT CLASS
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.SoccerMap = (function(_super) {
    var curve, data, field;

    __extends(SoccerMap, _super);

    curve = tageswoche.curve;

    field = tageswoche.field;

    data = tageswoche.data;

    function SoccerMap(container, width, settings) {
      var height, self;
      this.settings = settings != null ? settings : {};
      self = this;
      field.scale = width / field.originalWidth;
      height = width / field.widthHeightRelation;
      SoccerMap.__super__.constructor.call(this, container, width, height);
      this.scene = void 0;
      this.actions = [];
      this.red = "#EE402F";
      this.blue = "#0051A3";
      this.white = "#FFFFFF";
      this.circleRadius = 13;
      this.pathAttributes = {
        "default": {
          fill: this.red,
          stroke: "",
          "stroke-width": 1.0,
          "stroke-linejoin": "round"
        }
      };
      this.nextScene();
    }

    SoccerMap.prototype.nextScene = function() {
      var _this = this;
      return data.loadScenes(function(error, scenes) {
        _this.scene = data.nextScene();
        return _this.draw();
      });
    };

    SoccerMap.prototype.previousScene = function() {
      var _this = this;
      return data.loadScenes(function(error, scenes) {
        _this.scene = data.previousScene();
        return _this.draw();
      });
    };

    SoccerMap.prototype.draw = function() {
      var action, _i, _len, _ref;
      this.actions = this.scene.actions;
      _ref = this.actions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        action.start = field.calcPosition(action.start);
        if (action.end) {
          action.end = field.calcPosition(action.end);
        }
      }
      this.map.clear();
      this.updateInfo();
      this.drawPasses();
      return this.drawPositions();
    };

    SoccerMap.prototype.updateInfo = function() {
      return $("#result .score").html(this.scene.score);
    };

    SoccerMap.prototype.drawPasses = function() {
      var action, lastPosition, _i, _len, _ref;
      lastPosition = void 0;
      _ref = this.actions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        if (action.end) {
          this.drawSprint(action.start, action.end);
        }
        if (lastPosition) {
          this.addPass(lastPosition, action.start);
        }
        lastPosition = action.end ? action.end : action.start;
      }
      if (lastPosition) {
        return this.drawGoal(lastPosition);
      }
    };

    SoccerMap.prototype.drawPositions = function() {
      var action, drawStartLabel, startCircleRadius, _i, _len, _ref, _results;
      _ref = this.actions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        startCircleRadius = this.circleRadius;
        drawStartLabel = true;
        if (action.end) {
          this.map.circle(action.end.x, action.end.y, this.circleRadius).attr(this.pathAttributes["default"]);
          this.label(action.end, action.number);
          startCircleRadius = startCircleRadius / 2;
          drawStartLabel = false;
        }
        this.map.circle(action.start.x, action.start.y, startCircleRadius).attr(this.pathAttributes["default"]);
        if (drawStartLabel) {
          _results.push(this.label(action.start, action.number));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    SoccerMap.prototype.drawSprint = function(start, end) {
      var path;
      path = curve.wavy(start, end, "10%");
      return this.map.path(path).attr({
        fill: "",
        stroke: this.red,
        "stroke-width": 2
      });
    };

    SoccerMap.prototype.addPass = function(start, end) {
      var endGap, length, path, startGap, subCurve;
      path = curve.curve(start, end, "10%", 0.6, "right");
      startGap = 0;
      endGap = 16;
      length = Raphael.getTotalLength(path);
      subCurve = Raphael.getSubpath(path, startGap, length - endGap);
      this.drawArrow(path, {
        length: length - endGap
      });
      return this.map.path(subCurve).attr({
        fill: "",
        stroke: this.white,
        "stroke-width": 2
      });
    };

    SoccerMap.prototype.drawGoal = function(start) {
      var end, path;
      end = field.goalPosition();
      path = curve.curve(start, end, "10%", 0.6, "right");
      this.drawArrow(path, {
        size: 10,
        pointyness: 0.3,
        strokeWidth: 3
      });
      return this.map.path(path).attr({
        fill: "",
        stroke: this.white,
        "stroke-width": 3
      });
    };

    SoccerMap.prototype.drawArrow = function(path, _arg) {
      var arrowhead, base, color, length, pointyness, size, strokeWidth, tip;
      length = _arg.length, size = _arg.size, pointyness = _arg.pointyness, strokeWidth = _arg.strokeWidth, color = _arg.color;
      if (length == null) {
        length = Raphael.getTotalLength(path);
      }
      if (size == null) {
        size = 10;
      }
      if (pointyness == null) {
        pointyness = 0.3;
      }
      if (strokeWidth == null) {
        strokeWidth = 2;
      }
      if (color == null) {
        color = this.white;
      }
      if ((length - size) > 30) {
        base = Raphael.getPointAtLength(path, length - size);
        tip = Raphael.getPointAtLength(path, length);
        arrowhead = curve.arrow(base, tip, pointyness);
        return this.map.path(arrowhead).attr({
          fill: "",
          stroke: color,
          "stroke-width": strokeWidth
        });
      }
    };

    SoccerMap.prototype.label = function(position, label) {
      var color, font, x;
      color = "#FFFFFF";
      x = position.x;
      if (+label > 9) {
        x -= 1;
      }
      font = '200 16px "Helvetica Neue", Helvetica, "Arial Unicode MS", Arial, sans-serif';
      return this.map.text(x, position.y, label).attr({
        fill: color,
        stroke: "none",
        "font": font
      });
    };

    return SoccerMap;

  })(RaphaelMap);

}).call(this);
